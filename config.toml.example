[app]
secret_key = "your-secret-key"
session_cookie_secure = true
session_cookie_httponly = true
session_cookie_samesite = "Lax"
admin_emails = ["example@domain.tld", "another.admin@example.tld"]

[auth]
# If true, use external oauth2-proxy authentication (Nginx auth_request).
# If false, handle OAuth2 internally via Authlib providers defined below.
use_oauth2_proxy = true

[database]
# Default: use SQLite in 'data/avauth.db'
# For Postgres: "postgresql+psycopg2://user:pass@db_host/db_name"
url = "sqlite:///./data/avauth.db"

[local_auth]
# If true, allow local username/password authentication (alongside or instead of OAuth)
enabled = false

[[oauth_providers]]
name = "mock_provider"
client_id = "mock_client_id"
client_secret = "mock_client_secret"
authorize_url = "http://localhost:6000/oauth/authorize"
access_token_url = "http://localhost:6000/oauth/token"
api_base_url = "http://localhost:6000/oauth/"
client_kwargs = { scope = "read write" }
label = "Sign in with Mock OAuth"
image_url = "https://via.placeholder.com/150"

[[oauth_providers]]
name = "google"
client_id = "YOUR_GOOGLE_CLIENT_ID"
client_secret = "YOUR_GOOGLE_CLIENT_SECRET"
server_metadata_url = "https://accounts.google.com/.well-known/openid-configuration"
api_base_url = "https://www.googleapis.com/oauth2/v1/"
client_kwargs = {
    scope = "openid email profile",
    code_challenge_method = "S256"
}
label = "Sign in with Google"
image_url = "https://developers.google.com/identity/images/g-logo.png"

[[oauth_providers]]
name = "microsoft"
client_id = "YOUR_MICROSOFT_CLIENT_ID"
client_secret = "YOUR_MICROSOFT_CLIENT_SECRET"
authorize_url = "https://login.microsoftonline.com/common/oauth2/v2.0/authorize"
access_token_url = "https://login.microsoftonline.com/common/oauth2/v2.0/token"
api_base_url = "https://graph.microsoft.com/v1.0/"
client_kwargs = { scope = "User.Read" }
label = "Sign in with Microsoft"
image_url = "https://login.live.com/images/microsoft_logo.png"
